#include <stdio.h>
#include <stdlib.h>

// Structure to represent a time interval
struct Interval {
    int start;
    int end;
};

// Function to compare intervals based on their start times
int compareIntervals(const void *a, const void *b) {
    return ((struct Interval*)a)->start - ((struct Interval*)b)->start;
}

// Function to merge overlapping intervals
void mergeIntervals(struct Interval intervals[], int n) {
    // If there are less than two intervals, nothing to merge
    if (n <= 1) {
        return;
    }

    // Sort the intervals based on their start times
    qsort(intervals, n, sizeof(struct Interval), compareIntervals);

    // Initialize result as the first interval
    int resultIndex = 0;

    // Iterate through all intervals
    for (int i = 1; i < n; i++) {
        // If the current interval overlaps with the previous one, merge them
        if (intervals[resultIndex].end >= intervals[i].start) {
            intervals[resultIndex].end = (intervals[resultIndex].end > intervals[i].end) ? intervals[resultIndex].end : intervals[i].end;
        } else {
            // If no overlap, move to the next interval in the result
            resultIndex++;
            intervals[resultIndex] = intervals[i];
        }
    }

    // Print the merged intervals
    printf("Merged intervals are:\n");
    for (int i = 0; i <= resultIndex; i++) {
        printf("[%d, %d] ", intervals[i].start, intervals[i].end);
    }
    printf("\n");
}

int main() {
    // Example usage
    struct Interval intervals[] = { {1, 3}, {2, 6}, {8, 10}, {15, 18} };
    int n = sizeof(intervals) / sizeof(intervals[0]);

    printf("Original intervals are:\n");
    for (int i = 0; i < n; i++) {
        printf("[%d, %d] ", intervals[i].start, intervals[i].end);
    }
    printf("\n");

    mergeIntervals(intervals, n);

    return 0;
}
