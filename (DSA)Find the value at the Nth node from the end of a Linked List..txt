#include <stdio.h>
#include <stdlib.h>

// Definition for a singly-linked list node
struct Node {
    int data;
    struct Node* next;
};

// Function to insert a new node at the beginning of a linked list
struct Node* insertNode(struct Node* head, int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = head;
    return newNode;
}

// Function to find the value at the Nth node from the end of a linked list
int findNthFromEnd(struct Node* head, int n) {
    if (head == NULL || n <= 0) {
        printf("Invalid input\n");
        return -1;
    }

    struct Node *firstPtr = head, *secondPtr = head;

    // Move the second pointer n nodes ahead
    for (int i = 0; i < n; i++) {
        if (secondPtr == NULL) {
            printf("List has fewer than %d nodes\n", n);
            return -1;
        }
        secondPtr = secondPtr->next;
    }

    // Move both pointers until the second pointer reaches the end
    while (secondPtr != NULL) {
        firstPtr = firstPtr->next;
        secondPtr = secondPtr->next;
    }

    // The first pointer now points to the Nth node from the end
    return firstPtr->data;
}

// Function to print the linked list
void printList(struct Node* head) {
    while (head != NULL) {
        printf("%d -> ", head->data);
        head = head->next;
    }
    printf("NULL\n");
}

int main() {
    struct Node* head = NULL;

    // Inserting elements into the linked list
    head = insertNode(head, 5);
    head = insertNode(head, 8);
    head = insertNode(head, 12);
    head = insertNode(head, 3);
    head = insertNode(head, 7);

    printf("Linked List: ");
    printList(head);

    int n = 2; // Find the value at the 2nd node from the end
    int result = findNthFromEnd(head, n);

    if (result != -1) {
        printf("Value at the %dnd node from the end: %d\n", n, result);
    }

    return 0;
}
